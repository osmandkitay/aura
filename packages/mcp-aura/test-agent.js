#!/usr/bin/env node

/**
 * Agent Executor Script for Testing MCP-AURA Package
 * 
 * This script implements the test scenarios from step.md to validate
 * the mcp-aura package functionality without requiring a full LLM setup.
 */

import { handleMCPRequest, getSiteInfo, clearAdapterCache } from './dist/index.js';

const AURA_SERVER_URL = 'http://localhost:3000';

// Test credentials from the test plan
const TEST_CREDENTIALS = {
  email: 'demo@aura.dev',
  password: 'password123'
};

// Color codes for console output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function success(message) {
  log(`‚úÖ ${message}`, colors.green);
}

function error(message) {
  log(`‚ùå ${message}`, colors.red);
}

function info(message) {
  log(`‚ÑπÔ∏è  ${message}`, colors.blue);
}

function warning(message) {
  log(`‚ö†Ô∏è  ${message}`, colors.yellow);
}

function section(title) {
  log(`\n${colors.bold}=== ${title} ===${colors.reset}`, colors.blue);
}

async function testMCPRequest(description, request, expectedSuccess = true) {
  info(`Testing: ${description}`);
  
  try {
    const response = await handleMCPRequest(request);
    
    if (response.success === expectedSuccess) {
      success(`‚úÖ ${description} - SUCCESS`);
      if (response.data) {
        console.log(`   Data:`, JSON.stringify(response.data, null, 2));
      }
      if (response.error) {
        console.log(`   Error:`, response.error);
      }
    } else {
      error(`‚ùå ${description} - UNEXPECTED RESULT`);
      console.log(`   Expected success: ${expectedSuccess}, Got: ${response.success}`);
      console.log(`   Response:`, JSON.stringify(response, null, 2));
    }
    
    return response;
  } catch (err) {
    error(`‚ùå ${description} - EXCEPTION: ${err.message}`);
    return null;
  }
}

async function runHappyPathTests() {
  section('SCENARIO A: Happy Path Tests');
  
  // Test 1: User Authentication
  const loginResponse = await testMCPRequest(
    'Test 1: User Authentication', 
    {
      siteUrl: AURA_SERVER_URL,
      capabilityId: 'login',
      args: TEST_CREDENTIALS,
      requestId: 'test-1-login'
    }
  );
  
  if (!loginResponse?.success) {
    warning('Login failed - subsequent tests may fail');
    return;
  }
  
  // Test 2: Accessing Protected Data
  await testMCPRequest(
    'Test 2: Get Profile Information',
    {
      siteUrl: AURA_SERVER_URL,
      capabilityId: 'get_profile',
      args: {},
      requestId: 'test-2-profile'
    }
  );
  
  // Test 3: Writing Data
  await testMCPRequest(
    'Test 3: Create New Post',
    {
      siteUrl: AURA_SERVER_URL,
      capabilityId: 'create_post',
      args: {
        title: 'AI Test Post',
        content: 'This post was generated by the MCP-AURA test agent.'
      },
      requestId: 'test-3-create-post'
    }
  );
}

async function runFailurePathTests() {
  section('SCENARIO B: Failure Path Tests');
  
  // Test 4: Unauthorized Access (restart session)
  info('Clearing adapter cache to simulate session restart...');
  clearAdapterCache();
  
  await testMCPRequest(
    'Test 4: Unauthorized Access',
    {
      siteUrl: AURA_SERVER_URL,
      capabilityId: 'get_profile',
      args: {},
      requestId: 'test-4-unauthorized'
    },
    false // Expected to fail
  );
  
  // Test 5: Non-Existent Capability
  await testMCPRequest(
    'Test 5: Non-Existent Capability',
    {
      siteUrl: AURA_SERVER_URL,
      capabilityId: 'buy_laptop',
      args: {},
      requestId: 'test-5-non-existent'
    },
    false // Expected to fail
  );
  
  // Test 6: Insufficient Arguments
  await testMCPRequest(
    'Test 6: Insufficient Arguments',
    {
      siteUrl: AURA_SERVER_URL,
      capabilityId: 'login',
      args: {}, // Empty args - should fail
      requestId: 'test-6-insufficient-args'
    },
    false // Expected to fail
  );
}

async function runEdgeCaseTests() {
  section('SCENARIO C: Edge Case Tests');
  
  // First login for edge case tests
  info('Logging in for edge case tests...');
  await handleMCPRequest({
    siteUrl: AURA_SERVER_URL,
    capabilityId: 'login',
    args: TEST_CREDENTIALS
  });
  
  // Test 7: Semantic Equivalence - we'll test logout capability
  info('Test 7: Semantic Equivalence - Testing logout capability');
  
  const logoutTests = [
    { description: 'Sign me out', capabilityId: 'logout' },
    { description: 'End my current session', capabilityId: 'logout' },
    { description: 'Log me out of the system', capabilityId: 'logout' }
  ];
  
  for (let i = 0; i < logoutTests.length; i++) {
    // Login again for each test
    if (i > 0) {
      await handleMCPRequest({
        siteUrl: AURA_SERVER_URL,
        capabilityId: 'login',
        args: TEST_CREDENTIALS
      });
    }
    
    await testMCPRequest(
      `Test 7.${i + 1}: ${logoutTests[i].description}`,
      {
        siteUrl: AURA_SERVER_URL,
        capabilityId: logoutTests[i].capabilityId,
        args: {},
        requestId: `test-7-${i + 1}`
      }
    );
  }
  
  // Test 8: Disordered Arguments
  info('Logging in again for Test 8...');
  await handleMCPRequest({
    siteUrl: AURA_SERVER_URL,
    capabilityId: 'login',
    args: TEST_CREDENTIALS
  });
  
  await testMCPRequest(
    'Test 8: Disordered Arguments',
    {
      siteUrl: AURA_SERVER_URL,
      capabilityId: 'create_post',
      args: {
        content: 'Does the order of arguments matter?',
        title: 'Argument Order Test'
      },
      requestId: 'test-8-disordered'
    }
  );
}

async function testSiteInfo() {
  section('SITE INFO TEST');
  
  info('Testing getSiteInfo function...');
  
  try {
    const siteInfo = await getSiteInfo(AURA_SERVER_URL);
    
    if (siteInfo.success) {
      success('‚úÖ Site info retrieved successfully');
      console.log('Site Manifest:', JSON.stringify(siteInfo.manifest, null, 2));
      console.log('Available Capabilities:', siteInfo.availableCapabilities);
    } else {
      error('‚ùå Failed to retrieve site info');
      console.log('Error:', siteInfo.error);
    }
    
    return siteInfo;
  } catch (err) {
    error(`‚ùå Site info test failed: ${err.message}`);
    return null;
  }
}

async function checkServerConnection() {
  section('SERVER CONNECTION CHECK');
  
  info(`Checking if AURA server is running at ${AURA_SERVER_URL}...`);
  
  try {
    const response = await fetch(`${AURA_SERVER_URL}/.well-known/aura.json`);
    if (response.ok) {
      success('‚úÖ AURA server is running and accessible');
      return true;
    } else {
      error(`‚ùå AURA server responded with status ${response.status}`);
      return false;
    }
  } catch (err) {
    error(`‚ùå Cannot connect to AURA server: ${err.message}`);
    warning('Please start the reference server first:');
    console.log('  From project root: pnpm --filter aura-reference-server dev');
    console.log('  Then run this test again: pnpm test:agent');
    return false;
  }
}

async function main() {
  log(`${colors.bold}üöÄ MCP-AURA Package Test Agent${colors.reset}`, colors.blue);
  log(`${colors.bold}Testing scenarios from step.md${colors.reset}`, colors.blue);
  
  // First check if package is working
  section('PACKAGE VALIDATION');
  info('Validating mcp-aura package import...');
  try {
    const { handleMCPRequest, getSiteInfo } = await import('./dist/index.js');
    success('‚úÖ MCP-AURA package imported successfully!');
    info(`Functions available: handleMCPRequest (${typeof handleMCPRequest}), getSiteInfo (${typeof getSiteInfo})`);
  } catch (err) {
    error(`‚ùå Cannot import mcp-aura package: ${err.message}`);
    error('Please run: pnpm build');
    process.exit(1);
  }
  
  // Check if server is running
  const serverRunning = await checkServerConnection();
  if (!serverRunning) {
    error('‚ùå Cannot proceed without AURA server. Please start it and try again.');
    process.exit(1);
  }
  
  // Test site info first
  const siteInfo = await testSiteInfo();
  if (!siteInfo?.success) {
    error('‚ùå Cannot retrieve site information. Tests may fail.');
  }
  
  try {
    // Run all test scenarios
    await runHappyPathTests();
    await runFailurePathTests(); 
    await runEdgeCaseTests();
    
    section('TEST SUMMARY');
    success('‚úÖ All test scenarios completed!');
    info('Check the results above to verify mcp-aura package functionality.');
    
  } catch (err) {
    error(`‚ùå Test execution failed: ${err.message}`);
    console.error(err);
    process.exit(1);
  }
}

// Run the test agent
main().catch(console.error);
